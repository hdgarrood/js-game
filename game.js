// Generated by CoffeeScript 1.4.0
(function() {
  var Canvas, Game, Pendulum, Point, window,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Canvas = Canvas = (function() {

    function Canvas(canvas) {
      this.canvas = canvas;
    }

    Canvas.prototype.width = function() {
      return this.canvas.width;
    };

    Canvas.prototype.height = function() {
      return this.canvas.height;
    };

    Canvas.prototype._context = function() {
      return this.canvas.getContext("2d");
    };

    Canvas.prototype.drawCircle = function(centre, radius, fillStyle) {
      var con;
      if (fillStyle == null) {
        fillStyle = 'black';
      }
      con = this._context();
      con.beginPath();
      con.arc(centre.x, centre.y, radius, 0, 2 * Math.PI, false);
      con.fillStyle = fillStyle;
      return con.fill();
    };

    Canvas.prototype.drawLine = function(point1, point2) {
      var con;
      con = this._context();
      con.beginPath();
      con.moveTo(point1.x, point1.y);
      con.lineTo(point2.x, point2.y);
      return con.stroke();
    };

    Canvas.prototype.clear = function(preserveTransform) {
      var con;
      if (preserveTransform == null) {
        preserveTransform = false;
      }
      con = this._context();
      if (preserveTransform) {
        con.save();
      }
      con.setTransform(1, 0, 0, 1, 0, 0);
      con.clearRect(0, 0, this.width(), this.height());
      if (preserveTransform) {
        return con.restore();
      }
    };

    return Canvas;

  })();

  window = this;

  this.Game = Game = (function() {

    function Game() {
      this.enter_main_loop = __bind(this.enter_main_loop, this);
      this.p = new Pendulum(100, new Point(100, 100));
      this.c = new Canvas(window.document.getElementById('canvas'));
      this.enter_main_loop();
    }

    Game.prototype.step_time = 10;

    Game.prototype.enter_main_loop = function() {
      this.p.draw(this.c);
      this.p.step();
      this.c.clear();
      return setTimeout(this.enter_main_loop, this.step_time);
    };

    return Game;

  })();

  this.Pendulum = Pendulum = (function() {

    function Pendulum(length, pivot, radius) {
      this.length = length;
      this.pivot = pivot;
      this.radius = radius != null ? radius : 5;
      this.angle = Math.PI / 3;
      this.velocity = 0;
      this.mass = 1;
      this.g = 1;
    }

    Pendulum.prototype.position = function() {
      return new Point(this.pivot.x + (this.length * Math.cos(this.angle)), this.pivot.y + (this.length * Math.sin(this.angle)));
    };

    Pendulum.prototype.strike = function(impulse) {
      return console.log('Pendulum#strike: Not implemented');
    };

    Pendulum.prototype.draw = function(canvas) {
      var pos;
      pos = this.position();
      canvas.drawCircle(pos, this.radius);
      return canvas.drawLine(pos, this.pivot);
    };

    Pendulum.prototype.step = function() {
      var accel;
      accel = this.mass * this.g * (Math.cos(this.angle));
      this.velocity += accel;
      return this.angle += this.velocity;
    };

    return Pendulum;

  })();

  this.Point = Point = (function() {

    function Point(x, y) {
      this.x = x;
      this.y = y;
    }

    return Point;

  })();

}).call(this);
